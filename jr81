using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualBasic.FileIO;
using System.Data;
using System.IO;
using OfficeOpenXml;



namespace SQLTestOne
{
    class Program
    {
        //public static BindingSource stuDetBindingSource = new BindingSource();
        static void Main(string[] args)
        {

            string connectionString = "Data Source=xmpdb01;Persist Security Info=True;User ID=jrxmedia;Password=JR1sqlus3r; database=RileysSandbox";
           // string csvloc = @"C:\Programs\MOCK_DATA.csv";
            //InsertOneLineSQL("John", "Doe", "123 Main St", "", "Anytown", "CA", "12345", DateTime.Now);
            //DataTable datatbl = ConvertFiletoDataTable2(csvloc, ",");

            string customFilePath = @"C:\Programs\ExcelDump";
            string filename = "excelSheet1222.xlsx";

           // string destinationTable = "dbo.TestTable";
            //datatbl = fixDates(datatbl);

           // BulkInsertToDatabase(datatbl, destinationTable, connectionString);

            string query = "SELECT * FROM TestTable WHERE State = @state";
            string state = "California";

            DataTable db = grabFromDB(connectionString, query, state);

            createExcel(db, customFilePath, filename);

            //createExcel(datatbl, customFilePath, filename);
            // string query = "SELECT * FROM TestTable WHERE State = 'MN'";
            // grabFromDB(connectionString, query);


            //# string csv_file_path = "";
            //# DataTable csvData = GetDataTableFromCSVFile(csv_file_path);

            //# InsertDataIntoSQLServerUsingSQLBulkCopy(csvData);
            // Define the path to the input CSV file
            //string csvFilePath = @"C:\Users\tcong\Downloads\MOCK_DATA (1).csv";
            // Define the delimiter used in the CSV file (e.g., ',')
            //char delimiter = ',';

            // Define the folder path to save the output Excel file
            // string folderPath = @"C:\Users\tcong\OneDrive\Desktop\55";
            // Define the name of the output Excel file
            //string fileName = "output_file1.xlsx";
            // Combine folder path and file name to get the full file path
            //string excelFilePath = Path.Combine(folderPath, fileName);

            // Ensure the folder exists, create it if it doesn't
            //if (!Directory.Exists(folderPath))
            //{
            //    Directory.CreateDirectory(folderPath);
            // }

            // Convert the CSV file to a DataTable
            //DataTable dataTable = ConvertFiletoDataTable(csvloc, delimiter);

            // Export the DataTable to an Excel file
            // ExportToExcel(dataTable, excelFilePath);

            //Console.WriteLine("CSV data successfully exported to Excel.");






            //string csvloc = @"C:\Users\tcong\OneDrive\Desktop\500 richest people 2021.csv";
            //InsertOneLineSQL("John", "Doe", "123 Main St", "", "Anytown", "CA", "12345", DateTime.Now);
            //ConvertFiletoDataTable(csvloc, ';');


            //# string csv_file_path = "";
            //# DataTable csvData = GetDataTableFromCSVFile(csv_file_path);

            //# InsertDataIntoSQLServerUsingSQLBulkCopy(csvData);


        }
        /**
            private static DataTable GetDataTableFromCSVFile(string csv_file_path)
            {
                DataTable csvData = new DataTable();
                try
                {
                    using(TextFieldParser csvReader = new TextFieldParser(csv_file_path))
                    {
                        csvReader.SetDelimiters(new string[] { ", " });
                        csvReader.hasFieldsEnclosedInQuotes = true;
                        string[] colFields = csvReader.readFields();
                        foreach(string column in colFields)
                        {
                            DataColumn datacolumn = new DataColumn(column);
                            datacolumn.AllowDBNull = true;
                            csvData.columns.Add(datacolumn);
                        }
                        while (!csvReader.EndOfData)
                        {
                            string[] fieldData = csvReader.ReadFields();

                            for (int i = 0; i < fieldData.Length; i++)
                            {
                                if (fieldData[i] == "")
                                {
                                    fieldData[i] = null; 
                                }
                            }
                            csvData.Rows.Add(fieldData);
                        }
                    }
                }
                catch(Exception ex)
                {
                    Console.WriteLine(ex);
                }
                return csvData;
            }
           
        
            public static void InsertDataIntoSQLServerUsingSQLBulkCopy(DataTable csvFileData)
            {
                using(SqlConnection connect = new SqlConnection("Data Source=xmpdb01;Persist Security Info=True;User ID=jrxmedia;Password=JR1sqlus3r; database=RileysSandbox");
                {
                    dbConnection.Open();
                    using (SqlBulkCopy s = new SqlBulkCopy(dbConnection))
                    {
                        s.DestinationTableName = 'TestTable';

                        foreach (var column in csvFileData.columns)
                            s.ColumnMappings.Add(column.toString(), column.ToString());

                        s.WriteToServer(csvFileData);
                    }
                    
                }
            }
    **/

            /**

        public static DataTable ConvertFiletoDataTable(string strFilePath, char delimeter)
        {

            DataTable dt = new DataTable();
            using (StreamReader sr = new StreamReader(strFilePath))
            {

                string[] headers = sr.ReadLine().Split(delimeter);
                foreach (string header in headers)
                {
                    dt.Columns.Add(header);
                }
                while (!sr.EndOfStream)
                {


                    //string[] row = sr.ReadLine().Split(delimeter);
                    DataRow dr = dt.NewRow();
                    for (int i = 0; i < headers.Length; i++)
                    {

                        dr[i] = row[i];
                    }
                    dt.Rows.Add(dr);
                }
            }
            return dt;
        }
            **/
       /**
        public static List<string> ReadFields(string row, string delimeter)
        {

            List<string> rowret;
            for(int i = 0; i < row.Length; i++)
            {
                
            }
        }
        **/
        /**
        public static void InsertOneLineSQL(string firstName, string lastName, string address1, string address2, string city, string state, string zip, DateTime dateOfBirth)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection("Data Source=xmpdb01;Persist Security Info=True;User ID=jrxmedia;Password=JR1sqlus3r; database=RileysSandbox"))
                {
                    conn.Open();

                    string sql = "INSERT INTO TestTable (FirstName, LastName, Address1, Address2, City, State, Zip, Date) " +
                                 "VALUES (@firstName, @lastName, @address1, @address2, @city, @state, @zip, @dateOfBirth)";

                    using (SqlCommand cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@firstName", firstName);
                        cmd.Parameters.AddWithValue("@lastName", lastName);
                        cmd.Parameters.AddWithValue("@address1", address1);
                        cmd.Parameters.AddWithValue("@address2", address2);
                        cmd.Parameters.AddWithValue("@city", city);
                        cmd.Parameters.AddWithValue("@state", state);
                        cmd.Parameters.AddWithValue("@zip", zip);
                        cmd.Parameters.AddWithValue("@dateOfBirth", dateOfBirth);

                        cmd.ExecuteNonQuery();
                    }

                    Console.WriteLine($" '{firstName} {lastName}' inserted successfully!");
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine("Error inserting data: " + ex.Message);
            }
        }
        **/
        public static DataTable grabFromDB(string connectionString, string query, string state)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand comm = new SqlCommand(query, connection);
                comm.Parameters.Add(new SqlParameter("@State", state));
                connection.Open();
                using (SqlDataAdapter dataAdapter = new SqlDataAdapter(comm)) // 
                {
                    DataTable datatb = new DataTable();
                   
                    dataAdapter.Fill(datatb);
                    return datatb;
                }
            }
        }
        
        public static void BulkInsertToDatabase(DataTable dataTable, string destinationTable, string connectionString)
        {
            // Define the connection string
            string conn = connectionString;

            // Use SqlBulkCopy to perform the bulk insert
            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))
            {
                // Set the destination table name
                sqlBulkCopy.DestinationTableName = destinationTable;

                try
                {
                    // Write the data to the SQL Server table
                    sqlBulkCopy.WriteToServer(dataTable);
                    Console.WriteLine("Data successfully inserted into the database.");
                }
                catch (Exception ex)
                {
                    // Handle any errors that may have occurred
                    Console.WriteLine($"An error occurred: {ex.Message}");
                }
            }
        }
        public static DataTable fixDates(DataTable dt)
        {
            foreach( DataRow dr in dt.Rows)
            {
                if (string.IsNullOrEmpty(dr["Date"].ToString()))
                {
                    dr["Date"] = null;
                }
            }
            return dt;
        }



        /**
        public static void ExportToExcel(DataTable dataTable, string filePath)
        {
            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("Sheet1");

                // Add headers
                for (int i = 0; i < dataTable.Columns.Count; i++)
                {
                    worksheet.Cell(1, i + 1).Value = dataTable.Columns[i].ColumnName;
                }

                // Add data
                for (int row = 0; row < dataTable.Rows.Count; row++)
                {
                    for (int col = 0; col < dataTable.Columns.Count; col++)
                    {
                        worksheet.Cell(row + 2, col + 1).Value = dataTable.Rows[row][col].ToString();
                    }
                }

                // Save the workbook
                workbook.SaveAs(filePath);
            }
        }
        **/


        public static DataTable ConvertFiletoDataTable(string strFilePath, char delimiter)
        {
            DataTable dt = new DataTable();
            using (StreamReader sr = new StreamReader(strFilePath))
            {
                // Read the headers
                List<string> headers = SplitCsvRow(sr.ReadLine(), delimiter);
                foreach (string header in headers)
                {
                    dt.Columns.Add(header);
                }

                // Read the data
                while (!sr.EndOfStream)
                {
                    List<string> rowValues = SplitCsvRow(sr.ReadLine(), delimiter);
                    DataRow dr = dt.NewRow();
                    for (int i = 0; i < headers.Count; i++)
                    {
                        dr[i] = rowValues[i];
                    }
                    dt.Rows.Add(dr);
                }
            }
            return dt;
        }

       

        public static List<string> SplitCsvRow(string row, char delimiter)
        {
            List<string> rowValues = new List<string>();
            bool insideQuotes = false;
            string currentField = string.Empty;

            for (int i = 0; i < row.Length; i++)
            {
                char currentChar = row[i];

                if (currentChar == '"')
                {
                    // Toggle the insideQuotes flag when encountering a quote character
                    if (insideQuotes && i < row.Length - 1 && row[i + 1] == '"')
                    {
                        // If the next character is also a quote, it's an escaped quote, so add it to the field
                        currentField += '"';
                        i++; // Skip the next quote
                    }
                    else
                    {
                        insideQuotes = !insideQuotes;
                    }
                }
                else if (currentChar == delimiter && !insideQuotes)
                {
                    // If encountering a delimiter and not inside quotes, finalize the current field
                    rowValues.Add(currentField);
                    currentField = string.Empty;
                }
                else
                {
                    // Add character to the current field
                    currentField += currentChar;
                }
            }

            // Add the last field
            rowValues.Add(currentField);

            return rowValues;
        }

        public static void InsertOneLineSQL(string firstName, string lastName, string address1, string address2, string city, string state, string zip, DateTime dateOfBirth)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection("Data Source=xmpdb01;Persist Security Info=True;User ID=jrxmedia;Password=JR1sqlus3r; database=RileysSandbox"))
                {
                    conn.Open();

                    string sql = "INSERT INTO TestTable (FirstName, LastName, Address1, Address2, City, State, Zip, Date) " +
                                 "VALUES (@firstName, @lastName, @address1, @address2, @city, @state, @zip, @dateOfBirth)";

                    using (SqlCommand cmd = new SqlCommand(sql, conn))
                    {
                        cmd.Parameters.AddWithValue("@firstName", firstName);
                        cmd.Parameters.AddWithValue("@lastName", lastName);
                        cmd.Parameters.AddWithValue("@address1", address1);
                        cmd.Parameters.AddWithValue("@address2", address2);
                        cmd.Parameters.AddWithValue("@city", city);
                        cmd.Parameters.AddWithValue("@state", state);
                        cmd.Parameters.AddWithValue("@zip", zip);
                        cmd.Parameters.AddWithValue("@dateOfBirth", dateOfBirth);

                        cmd.ExecuteNonQuery();
                    }

                    Console.WriteLine($" '{firstName} {lastName}' inserted successfully!");
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine("Error inserting data: " + ex.Message);
            }
        }

        public static void createExcel(DataTable dt, string filepath, string filename)
        {
            Directory.CreateDirectory(filepath);

            // Combine the folder path and file name to get the full file path
            string fullfilepath = Path.Combine(filepath, filename);

            using (var package = new ExcelPackage())
            {

                var worksheet = package.Workbook.Worksheets.Add("MySheet");
                worksheet.Cells["A1"].LoadFromDataTable(dt, true);
                /**
                var dataTable = dt;

                for (int row = 1; row <= dataTable.Rows.Count; row++)
                {
                    for (int col = 1; col <= dataTable.Columns.Count; col++)
                    {
                        worksheet.Cells[row, col].Value = dataTable.Rows[row - 1][col - 1];
                    }
                }
                **/
                List<int> dpos = new List<int>();
                for ( int i = 0; i < dt.Columns.Count; i++)
                {
                    if (dt.Columns[i].DataType.Name.Equals("DateTime"))
                    {
                        dpos.Add(i);
                    }   
                }
                foreach(var pos in dpos)
                {
                    worksheet.Column(pos + 1).Style.Numberformat.Format = "mm/dd/yyyy hh:mm:ss AM/PM";
                }

                // Save the package to a file
                var fileInfo = new FileInfo(fullfilepath);
                package.SaveAs(fileInfo);
            }
        }


        public static DataTable ConvertFiletoDataTable2(string strFilePath, string delimiter)
        {
            DataTable dt = new DataTable();
            using (TextFieldParser parser = new TextFieldParser(strFilePath, System.Text.Encoding.UTF8))
            {
                parser.HasFieldsEnclosedInQuotes = true;
                parser.Delimiters = new string[] { delimiter };
                // Read the headers
                string[] header = parser.ReadFields();
                
                foreach (string headers in header)
                {
                    dt.Columns.Add(headers);
                }

                // Read the data
                while (!parser.EndOfData) 
                {
                    string[] lineread = parser.ReadFields();
                    DataRow dr = dt.NewRow();
                    for (int i = 0; i < lineread.Length; i++)
                    {
                        dr[i] = lineread[i];
                    }
                    dt.Rows.Add(dr);
                }
            }
            return dt;
        }
    }
}



  
